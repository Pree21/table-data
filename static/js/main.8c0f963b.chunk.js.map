{"version":3,"sources":["components/table/datatable.js","components/home.js","App.js","serviceWorker.js","index.js"],"names":["DataTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","alert","state","selectData","nextProps","SelectAllData","undefined","setState","e","stopPropagation","_this2","item","react_default","a","createElement","onClick","style","background","id","type","value","checked","src","thumbnailUrl","width","title","React","Component","Home","handleSearch","event","term","target","SelectAll","data","page","refresh","console","log","fetch","concat","then","response","json","res","newdata","i","length","push","_this3","_this$state","className","placeholder","onChange","index_es","dataLength","next","fetchData","hasMore","refreshFunction","pullDownToRefresh","cellPadding","cellSpacing","filter","x","toLowerCase","includes","searchingFor","map","index","datatable","key","App","home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c0f963b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass DataTable extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            selectData: false\n        }\n    }\n\n    componentWillReceiveProps(nextProps){\n        const {SelectAllData} = nextProps;\n        if(SelectAllData !== undefined){\n            this.setState({selectData:SelectAllData})\n        }\n    }\n\n    selectData(e){\n        this.setState({\n            selectData: !this.state.selectData\n        })\n        e.stopPropagation();\n    }\n    handleClick=()=>{\n        alert('Row Clicked');\n    }\n    render() {\n        const { item, } = this.props;\n        const { selectData } = this.state\n        return (\n            <tr onClick={this.handleClick} style={{background : selectData ? '#eee' : '#fff' }}>\n                <td>{item.id}</td>\n                <td><input type='checkbox' value={selectData} checked={selectData} \n                onClick={(e)=>this.selectData(e)} /></td>\n                <td><img src={item.thumbnailUrl} width='50' /></td>\n                <td>{item.title}</td>\n            </tr>\n        );\n    }\n}\nexport default DataTable;","import React, { Component } from 'react';\nimport DataTable from './table/datatable';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nconst searchingFor = (term) => {\n  return function (x) {\n    return x.title.toLowerCase().includes(term.toLowerCase()) || !term\n  }\n}\nclass Home extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      term: '',\n      page: 1,\n      SelectAllData: false\n    }\n  }\n  componentDidMount() {\n    this.refresh(1);\n  }\n\n  refresh(page) {\n    const { data } = this.state;\n    console.log('refresh')\n    fetch(`https://jsonplaceholder.typicode.com/photos?albumId=${page}`)\n      .then(response => response.json())\n      .then(res => {\n        console.log('res', res)\n        let newdata = data;\n        for (let i = 0; i < res.length; i++) {\n          newdata.push(res[i])\n        }\n        this.setState({\n          data: newdata,\n          SelectAllData: false,\n          page\n        })\n\n      })\n  }\n  handleSearch = (event) => {\n    this.setState({\n      term: event.target.value,\n    })\n  }\n  SelectAll = () => {\n    this.setState({\n      SelectAllData: !this.state.SelectAllData\n    })\n  }\n\n  fetchData() {\n    console.log('fetchData');\n    let page = this.state.page;\n    page++;\n    this.refresh(page)\n    this.setState({ page })\n  }\n\n  render() {\n    const { data, term, SelectAllData } = this.state;\n    return (\n      <div className=\"app\">\n        <header>\n          <h1 className=\"logo\">Data Table</h1>\n        </header>\n        <div className=\"main\">\n          <div className=\"search-form\">\n            <form>\n              <input type=\"text\" className=\"text\" placeholder=\"Search by title\" onChange={this.handleSearch} />\n            </form>\n          </div>\n          <div className=\"\">\n            <InfiniteScroll\n              dataLength={data.length} //This is important field to render the next data\n              next={() => this.fetchData()}\n              hasMore={true}\n              style={{ width: '100%' }}\n              refreshFunction={() => this.refresh(1)}\n              pullDownToRefresh={true}>\n              <table cellPadding='8' cellSpacing='0'>\n                <thead>\n                  <tr>\n                    <td>S.No</td>\n                    <td><input type='checkbox' checked={SelectAllData} onClick={this.SelectAll} /> All </td>\n                    <td>Image</td>\n                    <td>Title</td>\n                  </tr>\n                </thead>\n                <tbody>{data.length > 0 && data.filter(searchingFor(term)).map((item, index) => <DataTable key={index}\n                  item={item} SelectAllData={SelectAllData} />)}\n                </tbody>\n              </table>\n            </InfiniteScroll>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport Home from './components/home';\n\nfunction App() {\n  return (\n    <Home/>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}