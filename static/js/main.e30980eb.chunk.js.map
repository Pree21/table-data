{"version":3,"sources":["components/table/datatable.js","components/home.js","App.js","serviceWorker.js","index.js"],"names":["DataTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectData","nextProps","SelectAllData","undefined","setState","e","stopPropagation","item","index","alert","concat","_this2","_this$props","react_default","a","createElement","onClick","handleClick","style","background","type","value","checked","src","thumbnailUrl","alt","title","width","Component","Home","handleScroll","document","body","scrollHeight","window","scrollY","innerHeight","loading","refresh","handleSearch","event","term","target","SelectAll","data","page","addEventListener","_this$state","fetch","then","response","json","res","console","log","newdata","i","length","push","_this$state2","className","placeholder","onChange","cellPadding","cellSpacing","map","datatable","key","colSpan","App","home","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e30980eb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass DataTable extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectData: false\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        const {SelectAllData} = nextProps;\r\n        if(SelectAllData !== undefined){\r\n            this.setState({selectData:SelectAllData})\r\n        }\r\n    }\r\n\r\n    selectData(e){\r\n        this.setState({\r\n            selectData: !this.state.selectData\r\n        })\r\n        e.stopPropagation();\r\n    }\r\n    handleClick(item,index){\r\n        alert(`Row ${index} Clicked`);\r\n    }\r\n    render() {\r\n        const { item,index } = this.props;\r\n        const { selectData } = this.state\r\n        return (\r\n            <tr onClick={()=>this.handleClick(item,index)} style={{background : selectData ? '#eee' : '#fff' }}>\r\n                <td>{index}</td>\r\n                <td><input type='checkbox' value={selectData} checked={selectData} \r\n                onClick={(e)=>this.selectData(e)} /></td>\r\n                <td><img src={item.thumbnailUrl} alt={item.title} width='50' /></td>\r\n                <td>{item.title}</td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\nexport default DataTable;","import React, { Component } from 'react';\r\nimport DataTable from './table/datatable';\r\n\r\nclass Home extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      data: [],\r\n      term: '',\r\n      page: 1,\r\n      SelectAllData: false,\r\n      loading:false\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.refresh();\r\n    window.addEventListener('scroll', this.handleScroll);\r\n  }\r\n\r\n  refresh() {\r\n    this.setState({ loading: true })\r\n    const { data, page,term } = this.state;\r\n    fetch(`https://jsonplaceholder.typicode.com/photos?_page=${page}&_limit=20&q=${term}`)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        console.log('res', res);\r\n        let newdata = data;\r\n        for (let i = 0; i < res.length; i++) {\r\n          newdata.push(res[i])\r\n        }\r\n        this.setState({\r\n          page:page+1,\r\n          data: newdata,\r\n          SelectAllData: false,\r\n          loading:false\r\n        })\r\n      })\r\n  }\r\n  handleScroll = () => {\r\n    let marginBottom = document.body.scrollHeight - window.scrollY - window.innerHeight;\r\n    if (marginBottom < 500 && this.state.loading === false) {\r\n      this.refresh();\r\n    }\r\n  }\r\n  handleSearch = (event) => {\r\n    this.setState({\r\n      term: event.target.value,\r\n    },()=>this.refresh())\r\n  }\r\n  SelectAll = () => {\r\n    this.setState({\r\n      SelectAllData: !this.state.SelectAllData\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { data, SelectAllData,loading } = this.state;\r\n    return (\r\n      <div className=\"app\">\r\n        <header>\r\n          <h1 className=\"logo\">Data Table</h1>\r\n        </header>\r\n        <div className=\"main\">\r\n          <div className=\"search-form\">\r\n            <form>\r\n              <input type=\"text\" className=\"text\" placeholder=\"Search by title\" onChange={this.handleSearch} />\r\n            </form>\r\n          </div>\r\n          <div className=\"\">\r\n            <table cellPadding='8' cellSpacing='0'>\r\n              <thead>\r\n                <tr>\r\n                  <td>S.No</td>\r\n                  <td><input type='checkbox' checked={SelectAllData} onChange={this.SelectAll} /> All </td>\r\n                  <td>Image</td>\r\n                  <td>Title</td>\r\n                </tr>\r\n              </thead>\r\n              <tbody>{data.length > 0 && data.map((item, index) => <DataTable key={index}\r\n                item={item} SelectAllData={SelectAllData} index={index+1} />)}\r\n                {loading && <tr><td colSpan='4'><h3>Loading...</h3></td></tr>}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Home from './components/home';\r\n\r\nfunction App() {\r\n  return (\r\n    <Home/>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}